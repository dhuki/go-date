// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dhuki/go-date/pkg/internal/adapter/repository (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/dhuki/go-date/pkg/internal/adapter/repository/model"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CountTotalUserPagination mocks base method.
func (m *MockRepository) CountTotalUserPagination(arg0 context.Context, arg1 uint64, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTotalUserPagination", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTotalUserPagination indicates an expected call of CountTotalUserPagination.
func (mr *MockRepositoryMockRecorder) CountTotalUserPagination(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTotalUserPagination", reflect.TypeOf((*MockRepository)(nil).CountTotalUserPagination), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 context.Context, arg1 *sqlx.Tx, arg2 model.User) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0, arg1, arg2)
}

// Finish mocks base method.
func (m *MockRepository) Finish(arg0 context.Context, arg1 *sqlx.Tx, arg2 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finish", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Finish indicates an expected call of Finish.
func (mr *MockRepositoryMockRecorder) Finish(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockRepository)(nil).Finish), arg0, arg1, arg2)
}

// GetRelationUserByUserIdAndCandidate mocks base method.
func (m *MockRepository) GetRelationUserByUserIdAndCandidate(arg0 context.Context, arg1, arg2 uint64) (model.RelationUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUserByUserIdAndCandidate", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.RelationUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUserByUserIdAndCandidate indicates an expected call of GetRelationUserByUserIdAndCandidate.
func (mr *MockRepositoryMockRecorder) GetRelationUserByUserIdAndCandidate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUserByUserIdAndCandidate", reflect.TypeOf((*MockRepository)(nil).GetRelationUserByUserIdAndCandidate), arg0, arg1, arg2)
}

// GetUserByID mocks base method.
func (m *MockRepository) GetUserByID(arg0 context.Context, arg1 uint64) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepository)(nil).GetUserByID), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockRepository) GetUserByUsername(arg0 context.Context, arg1 string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockRepositoryMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockRepository)(nil).GetUserByUsername), arg0, arg1)
}

// GetUserPagination mocks base method.
func (m *MockRepository) GetUserPagination(arg0 context.Context, arg1 uint64, arg2 string, arg3, arg4 int) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPagination", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPagination indicates an expected call of GetUserPagination.
func (mr *MockRepositoryMockRecorder) GetUserPagination(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPagination", reflect.TypeOf((*MockRepository)(nil).GetUserPagination), arg0, arg1, arg2, arg3, arg4)
}

// Start mocks base method.
func (m *MockRepository) Start(arg0 context.Context) (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockRepositoryMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRepository)(nil).Start), arg0)
}

// UpdateUserPremium mocks base method.
func (m *MockRepository) UpdateUserPremium(arg0 context.Context, arg1 model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPremium", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPremium indicates an expected call of UpdateUserPremium.
func (mr *MockRepositoryMockRecorder) UpdateUserPremium(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPremium", reflect.TypeOf((*MockRepository)(nil).UpdateUserPremium), arg0, arg1)
}

// UpsertRelationUser mocks base method.
func (m *MockRepository) UpsertRelationUser(arg0 context.Context, arg1 *sqlx.Tx, arg2 model.RelationUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRelationUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRelationUser indicates an expected call of UpsertRelationUser.
func (mr *MockRepositoryMockRecorder) UpsertRelationUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRelationUser", reflect.TypeOf((*MockRepository)(nil).UpsertRelationUser), arg0, arg1, arg2)
}
